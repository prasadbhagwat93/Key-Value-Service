package kvstore;
import java.util.*;

	import java.util.InputMismatchException;
	import java.util.Scanner;
	import java.util.Stack;
	 
	public class CheckCycle
	{
	    private Stack<Integer> stack;
	    private int adjacencyMatrix[][];
	    int source;
	    public CheckCycle() 
	    {
	        stack = new Stack<Integer>();
	        
	    }
	 
	    public boolean canFinish(int[][] prerequisites,int numCourses ) {
	    	if(prerequisites == null){
	            throw new IllegalArgumentException("illegal prerequisites array");
	        }
	     
	        int len = prerequisites.length;
	     
	        if(numCourses == 0 || len == 0){
	            return true;
	        }
	     
	        //track visited courses
	        int[] visit = new int[numCourses];
	     
	        // use the map to store what courses depend on a course 
	        HashMap<Integer,ArrayList<Integer>> map = new HashMap<Integer,ArrayList<Integer>>();
	        for(int[] a: prerequisites){
	            if(map.containsKey(a[1])){
	                map.get(a[1]).add(a[0]);
	            }else{
	                ArrayList<Integer> l = new ArrayList<Integer>();
	                l.add(a[0]);
	                map.put(a[1], l);
	            }
	        }
	     
	        for(int i=0; i<numCourses; i++){
	            if(!canFinishDFS(map, visit, i))
	                return false;
	        }
	     
	        return true;
	    }
	    private boolean canFinishDFS(HashMap<Integer,ArrayList<Integer>> map, int[] visit, int i){
	        if(visit[i]==-1) 
	            return false;
	        if(visit[i]==1) 
	            return true;
	     
	        visit[i]=-1;
	        if(map.containsKey(i)){
	            for(int j: map.get(i)){
	                if(!canFinishDFS(map, visit, j)) 
	                    return false;
	            }
	        }
	     
	        visit[i]=1;
	     
	        return true;
	    }
	    
	   /* public void dfs(int adjacency_matrix[][], int source)
	    {
	    	System.out.println("dude i am in dfs");
	        int number_of_nodes = adjacency_matrix[source].length - 1;
	 
	        adjacencyMatrix = new int[number_of_nodes + 1][number_of_nodes + 1];
	        for (int sourcevertex = 1; sourcevertex <= number_of_nodes; sourcevertex++)
	        {
	            for (int destinationvertex = 1; destinationvertex <= number_of_nodes; destinationvertex++)
	            {
	                adjacencyMatrix[sourcevertex][destinationvertex] =
	                   adjacency_matrix[sourcevertex][destinationvertex];
	            }
	        }
	 
	        int visited[] = new int[number_of_nodes + 1];		
	        int element = source;		
	        int destination = source;			
	        visited[source] = 1;		
	        stack.push(source);
	 
	        while (!stack.isEmpty())
	        {
	            element = stack.peek();
	            destination = element;	
		    while (destination <= number_of_nodes)
		    {
	                if (adjacencyMatrix[element][destination] == 1 && visited[destination] == 1)
	                {
	                    if (stack.contains(destination))
	                    {	
	                        System.out.println("The Graph contains cycle");
	                        return;	
	                    }
	                }
	 
	              	if (adjacencyMatrix[element][destination] == 1 && visited[destination] == 0)
		        {
	                    stack.push(destination);
	                    visited[destination] = 1;
	                    adjacencyMatrix[element][destination] = 0;
	                    element = destination;
	                    destination = 1;
		            continue;
	                }
	                destination++;
		    }
	            stack.pop();	
	        }
	        System.out.println("dude i am done with dfs");
	    }
	 
	  */	
	}